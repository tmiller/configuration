# ~/.projectrc
# vim:set ft=sh sw=2 sts=2:

[ -e "$PROJECT_DIR" ] || PROJECT_DIR="$HOME/projects"
[ -e "$DEFAULT_GIT_REPOT" ] || DEFAULT_GIT_REPOT="luckie"

export PROJECT_DIR

pcd() {
  cd "$PROJECT_DIR/$1"
}

pclone() {
 local url project_name example new hook

  # Use basename of url or second argument for project name
  if [ -n "$2" ]; then
    project_name="$2"
  else
    project_name="`basename $1 .git`"
  fi

  # Clone the repository if it exists
  if [ ! -d "$PROJECT_DIR/$project_name" ]; then
    new=1
    case "$1" in
      *:*) url="$1" ;;
      */*) url="git@github.com:${1}.git" ;;
      *)   url="git@github.com:${DEFAULT_GIT_REPOT}/${1}.git" ;;
    esac

    git clone "$url" "$PROJECT_DIR/$project_name" || return 1

    for example in "$PROJECT_DIR/$project_name"/config/*.example.yml; do
      cp "$example" "${example%.example.yml}.yml"
    done 2>/dev/null

    # Use RVM if it exists
    if [ -f "$PROJECT_DIR/$project_name/.rvmrc" ] && command -v __rvm_trust_rvmrc >/dev/null; then
      __rvm_trust_rvmrc "$PROJECT_DIR/$project_name/.rvmrc"
    fi
  fi
  pcd "$project_name"


  # Execute an setup script for the project if it exists
  if [ -n "$new" -a -x script/setup ]; then
    script/setup
  fi
}

setup-git-hooks() {

  [ ! -d .git ] && return 0;

  # Execute after merge on rebase causing ctags to run
  if [ ! -f .git/hooks/post-rewrite ]; then
    echo '#!/bin/sh' > .git/hooks/post-rewrite
    echo 'GIT_DIR="$(dirname "$(dirname "$0")")"' >> .git/hooks/post-rewrite
    echo 'export GIT_DIR' >> .git/hooks/post-rewrite
    echo 'case "$1" in' >> .git/hooks/post-rewrite
    echo '  rebase) exec "$GIT_DIR/hooks/post-merge" 0 rebase ;;' >> .git/hooks/post-rewrite
    echo 'esac' >> .git/hooks/post-rewrite
  fi

  # Automatically run ctags after checkout commit and merge
  if [ ! -f .git/hooks/ctags ]; then
    echo '#!/bin/sh' > .git/hooks/ctags
    echo 'rm -f .git/tags' >> .git/hooks/ctags
    echo 'ctags --tag-relative -f .git/tags --exclude=.git --exclude=.bundle --exclude=db --exclude=public/uploads --exclude=vendor --exclude=tmp --languages=-javascript,html,sql -R' >> .git/hooks/ctags
    chmod +x .git/hooks/ctags
    for hook in post-checkout post-commit post-merge; do
      echo '#!/bin/sh' > .git/hooks/$hook
      echo '$GIT_DIR/hooks/ctags >/dev/null 2>&1 &' >> .git/hooks/$hook
      chmod +x .git/hooks/$hook
    done
    .git/hooks/ctags
  fi
}

# Tab completion
if [ -n "$BASH_VERSION" ]; then
  _pcd()
  {
    local cur projects

    [ -r "$PROJECT_DIR" ] || return 0

    eval 'COMPREPLY=()'
    cur=${COMP_WORDS[COMP_CWORD]}
    projects=$(\ls "$PROJECT_DIR")

    if [ $COMP_CWORD -eq 1 ]; then
      eval 'COMPREPLY=( $(compgen -o filenames -W "$projects" $cur) )'
    fi

    return 0
  }
  complete -F _pcd pcd pclone
elif [ -n "$ZSH_VERSION" ]; then
  #compdef '_files -W "$PROJECT_DIR"' pcd pclone
  compctl -/ -W "$PROJECT_DIR" pcd pclone
fi

# Used for rails funcions
rails_root() {
  (
  dir=${1:-$(pwd)}
  i=0
  while [ "/" != "$dir" -a "$i" -ne 16 ]; do
    if [ -f "$dir/config/environment.rb" ]; then
      echo "$dir"
      return 0
    fi
    dir="$(dirname "$dir")"
    i=$(expr $i + 1)
  done
  return 1
  )
}

stc() {
  (
  local root
  root="`rails_root`"
  [ -n "$root" ] || root=.
  if [ "$root/config/amazon_s3.yml" -nt "$root/tmp/s3cfg" ] || [ -f "$root/config/amazon_s3.yml" -a ! -f "$root/tmp/s3cfg" ]; then
    ruby -ryaml -e '
    c = YAML.load(File.read(ARGV.first))[ENV["RAILS_ENV"]||"development"]
    File.open(ARGV.last,"w") do |f|
    f.puts "access_key = #{c["access_key_id"]}"
    f.puts "secret_key = #{c["secret_access_key"]}"
    end if c.kind_of?(Hash)
    ' "$root/config/amazon_s3.yml" "$root/tmp/s3cfg"
  fi
  if [ -f "$root/tmp/s3cfg" ]; then
    exec s3cmd -c "$root/tmp/s3cfg" "$@"
  else
    exec s3cmd "$@"
  fi
  )
}

script_rails() {
  if [ -f "`rails_root`/script/rails" ]; then
    "`rails_root`/script/rails" "$@"
  else
    local name
    name="$1"
    shift
    "`rails_root`/script/$name" "$@"
  fi
}

twiki () {
  rake db:migrate && rake db:migrate:redo && rake db:test:prepare
}

alias sc='script_rails console'
alias ss='script_rails server -u'
alias sdbc='script_rails dbconsole -p'

# git_prompt_info accepts 0 or 1 arguments (i.e., format string)
# returns text to add to bash PS1 prompt (includes branch name)
git_prompt_info () {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local d
    local s
    # Rebasing
    if [ -d "$g/rebase-apply" ] ; then
      if test -f "$g/rebase-apply/rebasing" ; then
        r="|REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    # Interactive rebase
    elif [ -f "$g/rebase-merge/interactive" ] ; then
      r="|REBASE-i"
      b="$(cat "$g/rebase-merge/head-name")"
    # Merging
    elif [ -f "$g/MERGE_HEAD" ] ; then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ] ; then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)" ; then
        if ! b="$(git describe --exact-match HEAD 2>/dev/null)" ; then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi

    # Dirty Branch
    local newfile='?? '
    if [ -n "$ZSH_VERSION" ]; then
      newfile='\?\? '
    fi
    d=''
    s=$(git status --porcelain 2> /dev/null)
    [[ $s =~ "$newfile" ]] && d+="+"
    [[ $s =~ "M " ]] && d+="*"
    [[ $s =~ "D " ]] && d+="-"

    if [ -n "${1-}" ]; then
      printf "$1" "${b##refs/heads/}$r$d"
    else
      printf "(%b) " "${b##refs/heads/}$r$d"
    fi
  fi
}
